Be good with data structure

DBMS ---> Programming the much !!!

How to solve the problem.

flow chart
-----------------
sysmatic representaion of the program flow..
start
initialization
how well the initiliazed data is been used
update/manipulate the data
how logic is reaching its productivity
stop


Algorithm 
------------------------------------------------------------------------------------------
public class CircularList {	
	//Create a node
	static class Node
	{
		int data;
		Node next;
	};	
	//function to insert a node at the beginning of a circular linked list 
	static Node push(Node head_ref, int data) {
		Node pointer = new Node();
		Node temp = head_ref;
		pointer.data=data;
		pointer.next=head_ref;
		
		//if linked list is not null then set the next of last node
		if(head_ref != null) {
			while (temp.next!=head_ref)
				temp =temp.next;
			temp.next=pointer;
		}
		else
			pointer.next = pointer;
		head_ref=pointer;
		return head_ref;		
	}
	
	//Function to print the nodes in a given circular linked list
	static void printlist(Node head)
	{
		Node temp = head;
		if(head != null) {
			do {
				System.out.println(temp.data);
				temp = temp.next;
			}
			while(temp!=head);			
		}
	}	
	public static void main(String[] args) {
		//Initialize empty list
		Node head = null;		
		//Let us create the list		
		head=push(head,12);
		head=push(head,24);
		head=push(head,36);
		head=push(head,48);
		head=push(head,60);
		System.out.println("Contents of Circular linked list are : ");
		printlist(head);		
	}
}

Flow Chart
==============

documentation : Circular linked list implemention
-------------------------------------------------------------------------
step 1: start of the program
step 2: We need to create a new node
step 3: New node should be loaded with the new data and a memory reference
step 4: Allocate the temporary memory to provide the head reference
step 5: Check wether head refernce d memory is point to null object 
step 6: If head refenrence being null then thats the end of the node and make sure it 
would point to first node.
step 7: if not, Go ahead and enter the data and create a reference memory to the next 
neighbouring nodes.
step 8: Loop the iteration fot n terms and print the same. 
step 9: stopping of the program.

-------------------------------------------------------------------------------------------------------------------------------------

Stack
---------
Real time example: ---> Library, Marriage------>Plates, Trays, cloths in cupboard, Bangles
Cards, Chapaties, cars in the signal, Bundles of paper, rod plates, etc etc


2+2 = 4 
2+5=7
8+5=13
.......>>> do not use + operator and get the numbers added.. Its about operators
functions

2-(-2) = 4

logic will not be single side 
there definately another a way around, 

sum (10,20 ) ===> 30 

---------------------------------------------------------------------------------------------------------------------------
Stack 
--------
Stack is an abstract data type with a bounded(predefined) capacity. 
It is simple data strcutures that allows adding and removing elements in a particular
order.
-- Every time an element is added, it goes on the top of the stack and the only element
that can be removed is the element that is the top of the stack. 

Algorithemic analysis
--------------------------------
1. Push Operation ------> Elements added to the top the stack
2. Pop Operarions ------> Elements removed from the top of the stack
3. Top Operations ------> This indicate the top element of the stack
4. Search Operations ----> Search/ find the elements refering to top element.

Stack works on LIFO (Last in First Out)

-------------------------------------------------------------------------------------------------------------------------------
Queue
---------
Queue is also an abstract data type. or queue is a lenaer data structure. 
in which the first element is inserted from one end is called as REAR(Tail) 
and removal of existing element takes place from the other end is called FRONT
(is called as Head)

-- FIFO ==> First in First Out. 

Assignment
-------------------
Algarithemic Implementation of 
Arrays
Linked List
Stack
Queue 
Problematic implementation of DS till here 
-------------------------------------------------------------------------------------------------------------------------------------



int a = 10;
System.out.println(a) ----------> O(1)
----> the time taken to execute 
----> time involved in the run time exection and the output.
int a= 10;
int b= 20;
int c= 30;
System.out.println(a)
System.out.println(a)
System.out.println(a) --- O(1) --> Constant Execution

Asymptotic ===> asymentric Notation
Big O
Omega
Theta 

for (int i=0; i<n;i++);
{
System.out.println(i);
} ----------------------------------> O(n) 

Asymtotic Notations
-----------------------------

-- Asymptotic notations ae the mathematical notations used to describe te running
tme of an algorithm, When the inout tends towards a particulat value or a limiting value.

-- for example: Bubble sort, 
10 9 11 8 5 4 12
9 10 11 8 5 4 12
9 10 11 5 8 4 12
9 10 11 5 4 8 12
9 10 5 11 4 8 12
9 5 10 11 4 8 12
5 9 10 11 4 8 12
5 9 10 4 11 8 12
5 9 4 10 11 8 12
5 4 9 10 11 8 12
4 5 9 10 8 11 12
4 5 9 8 10 11 12 =====> Sorted element
numerous for loops to get this done
3forloops : for 1st for loop  O(n) , 2nd O(n+1), 3rd O(n+2) ==> O(n+1+2) ==> O(3) 

Note: the time taken by the algorithm is linear i.e.. the best case 
best 
worse
average 

Note: When the input array is in reverse condition, the algorithm takes 
the maximum time to sort the elements i.e worst case

Note: When the input array is neither sorted nor order, then it takes average time,
these durations are called as asymptotic notations.

three types of notations
1. Big-O notations
2. Omega Notation
3. Theta Notation.

1. Big-O notations
---------------------------
Big - O notations represents the upper bound of the running time of an algorithm.
thus, it gives the worse case complexity of an algorithm.

Syntax: 
f(n) = O(g(n)) for n < n0

Algaritym Analysis
---------------------------
1. Loops analysis
==================

1) O(1) : Tiem complexity of a function (or set of statement) is considered as O(1) 
if it doesn't contain the loop, Recursion and all to any other non-constant time 
function

public void sum()
{
-------Statements  ---> O(1)
-------Statements
-------Statements
}

for (int i=1; i<=10 ; i++){

-------Statements  ---> O(1)
-------Statements
-------Statements
}  

2) O(n) : Time complexity of a loop is considered as O(n), If the loop variables is 
incremented / decremented by a constant amount. 

scanner sc = new Scanner(System.in);   ---> N number of input ---> Algorithm

for (int i=1; i <=n ; i++); ===> i+=c ---> i= i+c 
{
	 //Statements O(n)   O(1)
}

3) O(nc) --(n power c): Time complexity of nested loops is equal to number of times the 
innermost statement is executed. 
For example : 

for (int i=1; i<=n; i+=c){
    for(int j =1; j<=n;j+=c){
       for (int k=1; k<=n ; k+=c){ -----------------> O(n power 3)

        //Some statements
}
}
}----------------------------> O(n2) O(n power 2)

4) O(logn) : --> Time complexity of a loop is considered as O(Logn).
if the loop variables is divided /multiplied by a contant amount

for (int i=1; i<=n i/=c)
{
     Statements ---- O(1)
}

for (int i=1; i<=n i*=c)
{ 
        Statements ---- O(1)
}

for (int i=1; i<=n; i++)
{
     if(i%2==0)
     printf("%d", "is Even number", i);
}
5) O(loglogn): Time Complexity of a loop is considered as O(loglogn) if the loop
varibales is reduced / incresed exponentially by a constant amount.

for(int i=0; i<=n pow(i,c))    2 power 2 = 4  12345678 power 123456789 
{
Statements   -----> O(1)
}

10sec 

123456 1234567 --> 30sec 


------------------------------------------------------------------------------------------------------------------------------------

Worst, Average and best cases - time complexity

O(1)
O(n)
O(n power 2 )
--------------------------------------------------------------------------
Sorting and Seraching Techniques

1) Linear Search
-------------------------
1. Start from the leftmost elements of arr[] and one by one 
compare x with each element of arr[]
2. If x matchs with an element, Return index
3. If x doesn't matches with any element, return -1

-------------------------------------------------------------------------------------------------------------------------------------

The word "Algorithm" means a process or set of rules to be followed in calculations
or other problems-solving opertions",
Therefore algorithm referes to a set of rules/instructions.

Step by step solutions. 

Charecteristics of Algorithm
input:--->
1. Well Defined Inputs
2. Clear and Unambigious
3. Language Inependent

Output:
1. Well-defined Output
2. Finite-ness
3. Feasible

Advantages:
1. It is easy to understand
2. Algorithm is a step -wise representation of a solution to given problem
Example : 
step1: initialize the variables ,
int number_one = 100; 
int number_two=200;

step2: Store the result into another variable
int addition = number_one+number_two 

step 3: Priting the additon operation after successfull logic execution
System.out.println("Additon of two given numbers " + addition);

3.In algorithm the problem is broken into small pieces of steps, Hence it is easier for 
the programmer to convere it into actual program.

------------------------------------------------------------------------------------------------------------------------------------
Binary Tree
----------------

A tree whose elements have atmost 2 children is called binary tree.

Generally :--> Tree is made of Nodes --

		  Node
	Child Node          Child Node

Algorithm Representation
---------------------------------------
step 0: Start
step 1: Create a Node 
Step 2: Create left and right node
Step 3: Assign the Memory and Data to the Main Node
Step 4: Assign the Memory and Data to the Left and Right Node
step 5: Print the data from the main node 
step 6: Print the data of left and right nodes
step 6: Traversal of data representaion would from main node to left node and left to right Node
step 7: Stop

stactic class Node {
int data;
Node left_node , right_node;

public Node(int item)
{
	data = item
	left = right = null;
}
}

static class BinaryTree
{
       Node root;
       BinaryTree(int data)
       {
          root = new Node(data);
       } 
       BinaryTree(){
       root = null;
       }
public static void main(String[] args)
{
   BinaryTree tree = new BinaryTree();
   
tree.root = new Node(1);
tree.root.left = new Node(2);
tree.root.right = new Node(3);
tree.root.left.left = new Node(4);
tree.root.right.right = new Node(5);

	1 ---> root
             /     \
         2          3
        /            \
      4               5


Tree Traversal

1. Inorder
2. Preorder
3. PostOrder

Algarithmic Represention
----------------------------------------------
Inorder:----> Left---> Root > right

Algarithmic Represention
------------------------------------------------
Preorder: ---> Root --> Left -- Right

Algarithmic Represention
---------------------------------------------------
Post Oder:--> Left --> Right ---> Root

------------------------------------------------------------------------------------------------------------------------------------





















































